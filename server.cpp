// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Serv.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <map>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class ServHandler : virtual public ServIf {
  std::map<int, Student> m_studentMap;
 public:
  ServHandler() {
    // Your initialization goes here
  }

  void put(const Student& s) {
    // Your implementation goes here
    m_studentMap.insert(std::make_pair(s.sno, s));
    printf("put sno=%d, sname=%s, ssex=%d, sage=%d\n", s.sno, s.sname.c_str(), s.ssex, s.sage);
  }

  void get(Student& _return, const int32_t sno) {
    printf("get sno=%d\n", sno);
    // Your implementation goes here
    if (m_studentMap.find(sno) != m_studentMap.end()) {
        _return = m_studentMap[sno];
    } else {
        _return.sno = -1;
    }
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<ServHandler> handler(new ServHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new ServProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

